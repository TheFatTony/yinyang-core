{"version":3,"sources":["ng://yinyang/lib/yinyang.service.ts","ng://yinyang/lib/yinyang.component.ts","ng://yinyang/lib/yinyang.module.ts","ng://yinyang/lib/_guards/auth.guard.ts","ng://yinyang/lib/_guards/admin.guard.ts","ng://yinyang/lib/_helpers/error.interceptor.ts","ng://yinyang/lib/_helpers/jwt.interceptor.ts","ng://yinyang/lib/_transfer/user.ts","ng://yinyang/lib/_transfer/file.ts"],"names":["YinyangService","prototype","test","console","info","Injectable","args","providedIn","YinyangComponent","ngOnInit","Component","selector","template","styles","YinyangModule","NgModule","imports","declarations","exports","AuthGuard","router","this","canActivate","route","state","localStorage","getItem","navigate","queryParams","returnUrl","url","Router","AdminGuard","usr","JSON","parse","roles","find","x","ErrorInterceptor","intercept","request","next","handle","pipe","catchError","err","error","message","statusText","throwError","JwtInterceptor","currentUser","token","clone","setHeaders","Authorization","User","File"],"mappings":"kZAAA,IAAAA,EAAA,WAOE,SAAAA,YAEAA,EAAAC,UAAAC,KAAA,WACEC,QAAQC,KAAK,8CARhBC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd,GCAAC,EAAA,WAaE,SAAAA,YAEAA,EAAAP,UAAAQ,SAAA,iCAbDC,EAAAA,UAASJ,KAAA,CAAC,CACTK,SAAU,aACVC,SAAU,gDAKVC,OAAQ,+CATV,GCAAC,EAAA,oDAGCC,EAAAA,SAAQT,KAAA,CAAC,CACRU,QAAS,GAETC,aAAc,CAACT,GACfU,QAAS,CAACV,SAPZ,GCAAW,EAAA,WAME,SAAAA,EAAoBC,GAAAC,KAAAD,OAAAA,SAGpBD,EAAAlB,UAAAqB,YAAA,SAAYC,EAA+BC,GACzC,QAAIC,aAAaC,QAAQ,iBAIzBL,KAAKD,OAAOO,SAAS,CAAC,eAAgB,CAACC,YAAa,CAACC,UAAWL,EAAMM,QAC/D,wBAZVzB,EAAAA,sDAF4C0B,EAAAA,YAD7C,GCAAC,EAAA,WAOE,SAAAA,EAAoBZ,GAAAC,KAAAD,OAAAA,SAGpBY,EAAA/B,UAAAqB,YAAA,SAAYC,EAA+BC,GACzC,IAAMS,EAAYC,KAAKC,MAAMV,aAAaC,QAAQ,SAClD,SAAIO,IACEA,EAAIG,MAAMC,KAAK,SAAAC,GAAK,MAAM,eAANA,OAI1BjB,KAAKD,OAAOO,SAAS,CAAC,eAAgB,CAACC,YAAa,CAACC,UAAWL,EAAMM,QAC/D,wBAdVzB,EAAAA,sDAH4C0B,EAAAA,YAD7C,GCAAQ,EAAA,WAOE,SAAAA,YAGAA,EAAAtC,UAAAuC,UAAA,SAAUC,EAA2BC,GACnC,OAAOA,EAAKC,OAAOF,GAASG,KAAKC,EAAAA,WAAW,SAAAC,GAM1C,IAAMC,EAAQD,EAAIC,MAAMC,SAAWF,EAAIG,WACvC,OAAOC,EAAAA,WAAWH,2BAbvB1C,EAAAA,qDALD,GCAA8C,EAAA,gCAMEA,EAAAlD,UAAAuC,UAAA,SAAUC,EAA2BC,GACnCvC,QAAQC,KAAK,kBACb,IAAMgD,EAAclB,KAAKC,MAAMV,aAAaC,QAAQ,gBASpD,OARI0B,GAAeA,EAAYC,QAC7BZ,EAAUA,EAAQa,MAAM,CACtBC,WAAY,CACVC,cAAe,UAAUJ,EAAYC,UAKpCX,EAAKC,OAAOF,wBAbtBpC,EAAAA,eAJD,GCAAoD,iBCAAC","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class YinyangService {\n\n  constructor() { }\n\n  test() {\n    console.info('YinYang core avalible');\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'yy-yinyang',\n  template: `\n    <p>\n      yinyang works!\n    </p>\n  `,\n  styles: []\n})\nexport class YinyangComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { YinyangComponent } from './yinyang.component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [YinyangComponent],\n  exports: [YinyangComponent]\n})\nexport class YinyangModule { }\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(private router: Router) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (localStorage.getItem('currentUser')) {\n      return true;\n    }\n\n    this.router.navigate(['/auth/login'], {queryParams: {returnUrl: state.url}});\n    return false;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {User} from '../_transfer';\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n\n  constructor(private router: Router) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const usr: User = JSON.parse(localStorage.getItem('user'));\n    if (usr) {\n      if (usr.roles.find(x => x === 'ROLE_ADMIN'))\n        return true;\n    }\n\n    this.router.navigate(['/auth/login'], {queryParams: {returnUrl: state.url}});\n    return false;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor() {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(catchError(err => {\n      // if (err.status === 401) {\n      //     this.loginService.logout();\n      //     location.reload(true);\n      // }\n\n      const error = err.error.message || err.statusText;\n      return throwError(error);\n    }));\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    console.info('JwtInterceptor');\n    const currentUser = JSON.parse(localStorage.getItem('currentUser'));\n    if (currentUser && currentUser.token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","export class User {\n  name: string;\n  password: string;\n  roles: string[];\n}\n","export class File {\n  id: number;\n  fileName: string;\n  mimeType: string;\n  fileSize: number;\n  url: string;\n  alt: string;\n}\n"]}