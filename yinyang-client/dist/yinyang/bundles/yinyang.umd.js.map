{"version":3,"file":"yinyang.umd.js.map","sources":["ng://yinyang/lib/yinyang.service.ts","ng://yinyang/lib/yinyang.component.ts","ng://yinyang/lib/yinyang.module.ts","ng://yinyang/lib/_guards/auth.guard.ts","ng://yinyang/lib/_guards/admin.guard.ts","ng://yinyang/lib/_helpers/error.interceptor.ts","ng://yinyang/lib/_helpers/jwt.interceptor.ts","ng://yinyang/lib/_transfer/user.ts","ng://yinyang/lib/_transfer/file.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class YinyangService {\n\n  constructor() { }\n\n  test() {\n    console.info('YinYang core avalible');\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'yy-yinyang',\n  template: `\n    <p>\n      yinyang works!\n    </p>\n  `,\n  styles: []\n})\nexport class YinyangComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { YinyangComponent } from './yinyang.component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [YinyangComponent],\n  exports: [YinyangComponent]\n})\nexport class YinyangModule { }\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(private router: Router) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (localStorage.getItem('currentUser')) {\n      return true;\n    }\n\n    this.router.navigate(['/auth/login'], {queryParams: {returnUrl: state.url}});\n    return false;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {User} from '../_transfer';\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n\n  constructor(private router: Router) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const usr: User = JSON.parse(localStorage.getItem('user'));\n    if (usr) {\n      if (usr.roles.find(x => x === 'ROLE_ADMIN'))\n        return true;\n    }\n\n    this.router.navigate(['/auth/login'], {queryParams: {returnUrl: state.url}});\n    return false;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor() {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(catchError(err => {\n      // if (err.status === 401) {\n      //     this.loginService.logout();\n      //     location.reload(true);\n      // }\n\n      const error = err.error.message || err.statusText;\n      return throwError(error);\n    }));\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    console.info('JwtInterceptor');\n    const currentUser = JSON.parse(localStorage.getItem('currentUser'));\n    if (currentUser && currentUser.token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","export class User {\n  name: string;\n  password: string;\n  roles: string[];\n}\n","export class File {\n  id: number;\n  fileName: string;\n  mimeType: string;\n  fileSize: number;\n  url: string;\n  alt: string;\n}\n"],"names":["Injectable","Component","NgModule","router","Router","catchError","throwError"],"mappings":";;;;;;;;;;AAAA;QAOE;SAAiB;;;;QAEjB,6BAAI;;;YAAJ;gBACE,OAAO,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;aACvC;;oBATFA,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;6BAJD;;;;;;;ACAA;QAaE;SAAiB;;;;QAEjB,mCAAQ;;;YAAR;aACC;;oBAdFC,YAAS,SAAC;wBACT,QAAQ,EAAE,YAAY;wBACtB,QAAQ,EAAE,+CAIT;wBACD,MAAM,EAAE,EAAE;qBACX;;;;+BAVD;;;;;;;ACAA;;;;oBAGCC,WAAQ,SAAC;wBACR,OAAO,EAAE,EACR;wBACD,YAAY,EAAE,CAAC,gBAAgB,CAAC;wBAChC,OAAO,EAAE,CAAC,gBAAgB,CAAC;qBAC5B;;4BARD;;;;;;;ACAA;QAME,mBAAoBC,SAAc;YAAd,WAAM,GAANA,SAAM,CAAQ;SACjC;;;;;;QAED,+BAAW;;;;;YAAX,UAAY,KAA6B,EAAE,KAA0B;gBACnE,IAAI,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;oBACvC,OAAO,IAAI,CAAC;iBACb;gBAED,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,EAAE,EAAC,WAAW,EAAE,EAAC,SAAS,EAAE,KAAK,CAAC,GAAG,EAAC,EAAC,CAAC,CAAC;gBAC7E,OAAO,KAAK,CAAC;aACd;;oBAbFH,aAAU;;;;;wBAFkCI,aAAM;;;wBADnD;;;;;;;ACAA;QAOE,oBAAoBD,SAAc;YAAd,WAAM,GAANA,SAAM,CAAQ;SACjC;;;;;;QAED,gCAAW;;;;;YAAX,UAAY,KAA6B,EAAE,KAA0B;;gBACnE,IAAM,GAAG,GAAS,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3D,IAAI,GAAG,EAAE;oBACP,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,YAAY,GAAA,CAAC;wBACzC,OAAO,IAAI,CAAC;iBACf;gBAED,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,EAAE,EAAC,WAAW,EAAE,EAAC,SAAS,EAAE,KAAK,CAAC,GAAG,EAAC,EAAC,CAAC,CAAC;gBAC7E,OAAO,KAAK,CAAC;aACd;;oBAfFH,aAAU;;;;;wBAHkCI,aAAM;;;yBADnD;;;;;;;ACAA;QAOE;SACC;;;;;;QAED,oCAAS;;;;;YAAT,UAAU,OAAyB,EAAE,IAAiB;gBACpD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAACC,oBAAU,CAAC,UAAA,GAAG;;oBAM7C,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,IAAI,GAAG,CAAC,UAAU,CAAC;oBAClD,OAAOC,eAAU,CAAC,KAAK,CAAC,CAAC;iBAC1B,CAAC,CAAC,CAAC;aACL;;oBAfFN,aAAU;;;;+BALX;;;;;;;ACAA;;;;;;;;QAME,kCAAS;;;;;YAAT,UAAU,OAAyB,EAAE,IAAiB;gBACpD,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;;gBAC/B,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gBACpE,IAAI,WAAW,IAAI,WAAW,CAAC,KAAK,EAAE;oBACpC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;wBACtB,UAAU,EAAE;4BACV,aAAa,EAAE,YAAU,WAAW,CAAC,KAAO;yBAC7C;qBACF,CAAC,CAAC;iBACJ;gBAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAC7B;;oBAdFA,aAAU;;6BAJX;;;;;;;ACAA,QAAA;;;mBAAA;QAIC;;;;;;ACJD,QAAA;;;mBAAA;QAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
